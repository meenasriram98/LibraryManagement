//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MiniProject.Library
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BookEntities5 : DbContext
    {
        public BookEntities5()
            : base("name=BookEntities5")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Book> Books { get; set; }
        public virtual DbSet<Borrow> Borrows { get; set; }
        public virtual DbSet<Copy> Copies { get; set; }
        public virtual DbSet<Request> Requests { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<user> users { get; set; }
    
        public virtual ObjectResult<spSearchBook_Result> spSearchBook(string author, string title, string publication, Nullable<int> page, Nullable<int> size)
        {
            var authorParameter = author != null ?
                new ObjectParameter("author", author) :
                new ObjectParameter("author", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var publicationParameter = publication != null ?
                new ObjectParameter("publication", publication) :
                new ObjectParameter("publication", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchBook_Result>("spSearchBook", authorParameter, titleParameter, publicationParameter, pageParameter, sizeParameter);
        }
    
        public virtual ObjectResult<Book> spSearchBookModel(string author, string title, string publication, Nullable<int> page, Nullable<int> size)
        {
            var authorParameter = author != null ?
                new ObjectParameter("author", author) :
                new ObjectParameter("author", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var publicationParameter = publication != null ?
                new ObjectParameter("publication", publication) :
                new ObjectParameter("publication", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Book>("spSearchBookModel", authorParameter, titleParameter, publicationParameter, pageParameter, sizeParameter);
        }
    
        public virtual ObjectResult<Book> spSearchBookModel(string author, string title, string publication, Nullable<int> page, Nullable<int> size, MergeOption mergeOption)
        {
            var authorParameter = author != null ?
                new ObjectParameter("author", author) :
                new ObjectParameter("author", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var publicationParameter = publication != null ?
                new ObjectParameter("publication", publication) :
                new ObjectParameter("publication", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Book>("spSearchBookModel", mergeOption, authorParameter, titleParameter, publicationParameter, pageParameter, sizeParameter);
        }
    }
}
